import {VerticalBox, HorizontalBox, Button, TextEdit, StyleMetrics, ComboBox, CheckBox, LineEdit} from "std-widgets.slint";
import { SideBar } from "side_bar.slint";
export component AppWindow inherits Window{
    width: 800px;
    height: 600px;
    // default-font-family: "Source Code Pro Mono";
    default-font-family: "JetBrains Mono NL Nerd Font";
    in-out property <string> send_data;
    // in-out property <string> send_data_show;
    in-out property <string> received_data;
    in-out property <int> received_data_length;
    in-out property <int> send_data_length;
    in-out property <int> send_data_length_last;
    in-out property <[string]> com_ports;
    in-out property <int> com_ports_index;
    in-out property <string> connect_button_text;
    in-out property <bool> hex_selected;

    // default value for connect_button_text
    connect_button_text: "Connect";
    hex_selected: false;

    callback connect_button_clicked(); 
    callback refresh_button_clicked();
    callback send_button_clicked();
    callback hex_checkbox_toggled();
    // callback hex_checkbox_toggled();

    // callback for com port selection
    callback com_port_selected();

    title: "Serial Port Communication";
    HorizontalBox {
        spacing: 0px;
        VerticalBox {
            width: 180px;
            VerticalLayout {
                // height: 150px;
                spacing: 10px;
                HorizontalLayout{
                    spacing: 10px;
                    height: 30px;
                    Text {
                        min-width: 50px;
                        vertical-alignment: center;
                        font-size: 15px;
                        text: "Port";
                    }
                    ComboBox {
                        width: 100px;
                        // model: ["COM1", "COM2", "COM3", "COM4"];
                        model: root.com_ports;
                        // models: root.com_ports;
                        selected => {
                            root.com_port_selected();
                        }
                        // urrent-value: root.com_ports_value;
                        current-index: root.com_ports_index;
                        // if the model is empty, the combobox will be disabled
                        enabled: root.com_ports.length > 0;
                        

                    }
                }
                HorizontalLayout{
                    height: 30px;
                    spacing: 10px;
                    Text {
                        min-width: 50px;
                        vertical-alignment: center;
                        font-size: 15px;
                        text: "Baudrate";
                        
                    }
                    TextInput {
                        width: 100px;
                        height: 30px;
                        // color: #ef0b0b;
                        single-line: true;
                        input-type: number;
                        enabled: true;
                        text: "115200";
                        vertical-alignment: center;
                        horizontal-alignment: center;
                        font-family: "JetBrains Mono NL Nerd Font";
                        font-size: 15px;
                        read-only: false;
                    }
                }
                HorizontalLayout{
                    spacing: 10px;
                    height: 30px;
                    Text {
                        min-width: 50px;
                        vertical-alignment: center;
                        font-size: 15px;
                        text: "Data Bits";
                    }
                    ComboBox {
                        width: 100px;
                        model: [5, 6, 7, 8];
                        // preset: 3;
                        current-index: 3;
                    }
                }
            }
            VerticalLayout {
                // padding-left: 10px;
                spacing: 5px;
                Button {
                    text: "Refresh";
                    height: 30px;
                    clicked => {
                        root.refresh_button_clicked();
                    }
                }
                connect_button := Button {
                    text: root.connect_button_text;
                    enabled: root.com_ports.length > 0;
                    height: 30px;
                    // enabled: false;
                    clicked => {
                        root.connect_button_clicked();
                    }
                    
                }
            }
            VerticalLayout {
                // height: 100px;
                HorizontalLayout {
                    hex_checkbox := CheckBox {
                        text: "hex";
                        checked: root.hex_selected;
                        toggled => {
                            root.hex_selected = !root.hex_selected;
                            root.hex_checkbox_toggled();
                        }
                    }
                }
                CheckBox {
                    text: "Auto Scroll";
                    checked: true;
                }
            }
            VerticalBox {
                height: 30px;
                HorizontalBox {
                    Text {
                        text: "Period";
                        font-family: "JetBrains Mono NL Nerd Font";
                    }
                    period_input := TextInput {
                        text: 0;
                        horizontal-alignment: center;
                        font-size: 14px;
                        visible: true;
                        read-only: false;
                        // limit the input to numbers only
                        input-type: number;
                    }
                    Text {
                        text: "ms";
                        font-family: "JetBrains Mono NL Nerd Font";
                    }
                }
            }
            
        }

        VerticalBox {
            Text {
                text: "Received Data";
                font-family: "JetBrains Mono NL Nerd Font";
            }
            TextEdit {
                text: root.received_data;
                vertical-stretch: 1;
                horizontal-stretch: 1;
                wrap: word-wrap;
                font-size: 16px;
                visible: true;
                read-only: true;
                
            }
            Text {
                text: "Send Data";
                font-family: "JetBrains Mono NL Nerd Font";
            }
            HorizontalLayout {
                LineEdit {
                    text <=> root.send_data;
                }
            }
            HorizontalLayout {
                Text {
                    text: "Send last: " + root.send_data_length_last + " Bytes | Total Sent: "+ root.send_data_length + " Bytes";
                    // text: root.send_data_length;
                    font-family: "JetBrains Mono NL Nerd Font";
                }
                Text {
                    text: "Received bytes: " + root.received_data_length;
                    font-family: "JetBrains Mono NL Nerd Font";
                }
            }

            HorizontalBox {
                padding-left: 300px;
                Button {
                    text: "Period Send";
                    enabled: period_input.text > 0;
                }
                Button {
                    text: "Send";
                    enabled: connect-button.text == "Disconnect"; 
                    clicked => {
                        root.send_button_clicked();
                    }
                }
            }
        }
    }
}

// import { LineEdit } from "std-widgets.slint";

// // export component App inherits Window {
// // export component AppWindow inherits Window{

// export component AppWindow inherits Window{
//     width: 800px;
//     height: 600px;
//     in-out property <string> data;
//     in-out property <string> data1;
//     callback edit();
//     VerticalLayout {
//         LineEdit {
//             text: root.data;
//             edited(s) => {
//                 root.data = s;
//                 debug(root.data);
//                 edit();
//             }
//         }
//         LineEdit {
//             text: root.data1;   

//         }
//     }
// }
